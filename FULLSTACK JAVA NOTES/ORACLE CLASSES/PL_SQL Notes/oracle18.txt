Packages
=========
A package is a collection of logical related sub programs.

PL/SQL procedures and functions are known as logical related sub programs.

Package creation involved in two steps.

1) Package specification 
-----------------------
	It contains declaration of logical related sub programs.

2) Package body
---------------
	It contains definition of logical related sub programs.

Example1:
---------
package specification 
---------------------
	create or replace package pkg1 
	is 
	procedure sum(A IN number, B IN number);
	END PKG1;
	/
	
package body 
-------------
	create or replace package body pkg1
	is 
	procedure sum(A IN number, B IN number)
	is
	C number;
	begin 
	C:=A+B;
	DBMS_OUTPUT.PUT_LINE('sum of two numbers is ='||C);
	end;
	end pkg1;
	/ 

To execute the package we need to use below command.
ex:
	exec  pkg1.sum(10,20);


Example:2
---------
package specification 
-------------------
	create or replace package pkg2
	is
	function ret_sum(A number,B number)
	return number;	
	end pkg2;
	/

package body 
-------------
	create or replace package body pkg2
	is
	function ret_sum(A number,B number)
	return number
	is
	C number;
	begin
	C:=A+B;
	return C;
	end;
	end pkg2;
	/

We can invoke above package by using below command.
ex:
	select pkg2.ret_sum(40,60) from dual;

Q) Write a query to display list of packages present in a database?

	select object_name from user_objects where object_type='PACKAGE';


Q) Write a query to see the source code of a package?

	select text from user_source where name='PKG1'; 


Q) Write a query to drop the package?

	drop package body pkg1;
	drop package pkg1;

	drop package body pkg2;
	drop package pkg2;


Triggers 
=========
Trigger is a PL/SQL block which executes based on events.

Trigger events are insert, update and delete.

Trigger timings are before, after and insteadof.

syntax:
------
	create or replace trigger <trigger_name> <timing> <event> on <object_name>
	begin 
	-
	-
	end;
	/

ex:
	create or replace trigger trg1 before insert on student 
	begin 
	DBMS_OUTPUT.PUT_LINE('Thanks for inserting');
	END;
	/

	select * from student; // no trigger executed 
		
	insert into student values(104,'ramulu','pune'); // trigger will execute 
	
It is possible to create multiple triggers at a time.

ex:
	create or replace trigger trg2 after insert OR update OR delete on student
	begin 
	IF inserting then 
	DBMS_OUTPUT.PUT_LINE('Thanks for Inserting');
	ELSIF updating then 
	DBMS_OUTPUT.PUT_LINE('Thanks for Updating');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Thanks for Deleting');
	END IF;
	END;
	/
	select * from student; // no trigger execute 
	update student set sname='rani' where sno=104; // trigger will execute 
	insert into student values(105,'rakesh','delhi'); // trigger will execute 
	delete from student where sno=101; // trigger will execute 

Triggers are divided into two types.

1) Statement level trigger 
-------------------------
By default every trigger is a statement level trigger.

In statement level trigger, our trigger will execute only for one time irrespective of number of records effected in a database table.
ex:
	create or replace trigger trg3 after delete on student
	begin 
	DBMS_OUTPUT.PUT_LINE('Thanks for deleting');
	end;
	/
	delete from student; // trigger will execute only for 1 time


2) Row level trigger 
--------------------
In row level trigger, our trigger will execute irrespective of number of records effected in a database table.

To create row level trigger we need to use "for each row" clause.

ex:
--	
	create or replace trigger trg4 after delete on student for each row
	begin 
	DBMS_OUTPUT.PUT_LINE('Thanks for Delete');
	END;
	/

	delete from student; // 4 times trigger will execute 

Q) Write a query to display list of triggers present in a database?

	select object_name from user_objects where object_type='TRIGGER';


Q) Write a query to see the source code of a trigger?

	select text from user_source where name='TRG4'; 


Q) Write a query to drop the package?

	drop trigger trg4;


Q) What is the difference between Normalization and Denormalization?

Normalization				Denormalization 
-----------------			---------------
Normalization is a process that is used	Denormalization is a database optimization
to eliminate data redundancy while	technique where we can add redundant data
ensuring data integrity or data		in a single table to void complex join
consistency.				operations.

It increases the complexity due to	It reduces the complexity due to single  
multiple tables.			table.

No redundent data.			Redundent data.

No waste of memory.			Waste of memory.

slower reads.				slower writes.

Low data availability.			High data availability.

Needs of joins.				No needs of joins.

	
























 







