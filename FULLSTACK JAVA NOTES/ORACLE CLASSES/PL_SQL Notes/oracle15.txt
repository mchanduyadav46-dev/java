To see the output in PL/SQL we need to use below command.
ex:
	SQL> set serveroutput on 

LOOPS in PL/SQL
===============
We have three types of loops in PL/SQL.

1) Simple Loop 

2) While Loop 

3) For Loop 


1) Simple Loop
--------------
It is used to evaluate the code how long our condition is true.

ex:
---
	DECLARE 
	A number:=1;
	BEGIN 
	DBMS_OUTPUT.PUT_LINE('Welcome');

	LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	EXIT WHEN A=4;
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thanks');
	END;
	/

2) While Loop 
----------------
It is used to evaluate the code how long our condition is true.

ex:
---
	DECLARE 
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');
	
	WHILE A<=4 LOOP 
	DBMS_OUTPUT.PUT_LINE('Hello');
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thanks');
	END;
	/
	
3) For Loop 
------------
It is used to evaluate the code how long our condition is true.

ex:
--
	DECLARE 
	A number;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');
	
	FOR A IN 1 .. 4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thanks');
	END;
	/

Q) Write a PL/SQL program to display 10 natural numbers?

	DECLARE 
	A number;
	BEGIN
	FOR A IN 1 .. 10 LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	END LOOP;
	END;
	/


Q) Write a PL/SQL program to display multiplication table of a given number?

	DECLARE 
	A number;
	N number;
	BEGIN
	N:=&no;
	FOR A IN 1 .. 10 LOOP
	DBMS_OUTPUT.PUT_LINE(N||' * '||A||' = '||N*A);
	END LOOP;
	END;
	/

Exception Handling in PL/SQL
============================
Runtime errors are called exceptions.

We have two types of exceptions in PL/SQL.

1) Predefined exceptions 

2) Userdefined exceptions 

1) Predefined exceptions 
-------------------------
Built-In exceptions are called predefined exceptions.

We have following list of predefined exceptions.

1) NO_DATA_FOUND Exception 

2) TOO_MANY_ROWS Exception 

3) VALUE_ERROR Exception 

4) ZERO_DIVIDE Exception

5) DUP_VAL_ON_INDEX Exception 

6) OTHERS 


1) NO_DATA_FOUND Exception 
---------------------------
This exception will raise when select statement does not return any rows.

ex:
---
	DECLARE 
	L_Ename emp.ename%TYPE;
	BEGIN
	select ename into L_Ename from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_Ename);
	EXCEPTION 
	WHEN NO_DATA_FOUND THEN 
	DBMS_OUTPUT.PUT_LINE('Id Not Found');
	END;
	/

2) TOO_MANY_ROWS Exception
---------------------------
This exception will raise when select statement returns more then one row.

ex:
---
	DECLARE 
	L_Ename emp.ename%TYPE;
	BEGIN
	select ename into L_Ename from emp;
	DBMS_OUTPUT.PUT_LINE(L_Ename);
	EXCEPTION 
	WHEN TOO_MANY_ROWS THEN 
	DBMS_OUTPUT.PUT_LINE('TOO MANY RECORDS');
	END;
	/

3) VALUE_ERROR Exception
-----------------------
This exception will raise when there is a mismatch with datatype or size.

ex:
---
	DECLARE 
	A number(3);
	BEGIN 
	A:=12345;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION 
	WHEN VALUE_ERROR THEN 
	DBMS_OUTPUT.PUT_LINE('Please check the size');
	END;
	/

ex:
---
	DECLARE 
	L_Esal emp.esal%TYPE;
	BEGIN 
	select ename into L_Esal from emp where eid=204;
	DBMS_OUTPUT.PUT_LINE(L_Esal);
	EXCEPTION
	WHEN VALUE_ERROR THEN 
	DBMS_OUTPUT.PUT_LINE('Please check datatype');
	END;
	/

4) ZERO_DIVIDE Exception
-------------------------
This exception will occur when we try to divide any number with zero.

ex:
	DECLARE 
	A number;
	BEGIN 
	A:=10/0;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION 
	WHEN ZERO_DIVIDE THEN 
	DBMS_OUTPUT.PUT_LINE('Dont divide by zero');
	END;
	/
5) DUP_VAL_ON_INDEX Exception
-------------------------------
This exception will occur when we try to insert duplicate value in a primary key.

ex:
	alter table emp add primary key(eid);

	BEGIN 
	insert into emp values(206,'Lara',56000,60,'Executor',400);
	DBMS_OUTPUT.PUT_LINE('Record Inserted');
	EXCEPTION 
	WHEN DUP_VAL_ON_INDEX THEN 
	DBMS_OUTPUT.PUT_LINE('Duplicate record not allowed');
	END;
	/

6) OTHERS
----------
It is a universal angular exception which is used to handle all types of exceptions.

ex:
---
	DECLARE 
	L_Ename emp.ename%TYPE;
	BEGIN
	select ename into L_Ename from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_Ename);
	EXCEPTION 
	WHEN OTHERS THEN 
	DBMS_OUTPUT.PUT_LINE('Id Not Found');
	END;
	/



2) Userdefined exceptions
-------------------------
Exceptions which are created by the user based on the application requirement are called userdefined exceptions.

Steps to create user defined exception 
--------------------------------------
step1:
------
	Declare the exception.

step2:
------
	Raise the exception. 

step3:
------
	Handle the exception.

ex:
---
	DECLARE 
	MY_EX1 EXCEPTION;
	A number:=5000;
	BEGIN 

	IF A>2000 THEN 
	RAISE MY_EX1;
	END IF;
	DBMS_OUTPUT.PUT_LINE(A);
	
	EXCEPTION 
	WHEN MY_EX1 THEN 
	DBMS_OUTPUT.PUT_LINE('Value is Too Large');
	END;
	/

Assignment 
===========
Q) Write a PL/SQL program to perform sum of 10 natural numbers?








































	




































































