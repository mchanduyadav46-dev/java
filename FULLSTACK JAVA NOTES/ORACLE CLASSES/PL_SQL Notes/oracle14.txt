To see the output in PL/SQL we need to use below command.
ex:
	SQL> set serveroutput  on 

In PL/SQL, DML operations are allowed.

Q) Write a PL/SQL program to insert a record into student table?

	DECLARE 
	L_sno number(3);
	L_sname varchar2(10);
	L_sadd  varchar2(12);
	BEGIN 
	L_sno:=&sno;
	L_sname:='&sname';
	L_sadd:='&sadd';
	insert into student values(L_sno,L_sname,L_sadd);
	DBMS_OUTPUT.PUT_LINE('Record Inserted');
	END;
	/
		
Q) Write a PL/SQL program to update student name based on student number?

	DECLARE 
	L_sno number(3);
	BEGIN
	L_sno:=&sno;
	update student set sname='rani' where sno=L_sno;
	DBMS_OUTPUT.PUT_LINE('Record Updated');
	END;
	/

Q) Write a PL/SQL program to delete student record based on student number?

	DECLARE 
	L_sno number(3);
	BEGIN
	L_sno:=&no;
	delete from student where sno=L_sno;
	DBMS_OUTPUT.PUT_LINE('Record Deleted');
	END;
	/

IN PL/SQL, DRL operations are allowed.

To execute select command in PL/SQL we need to use into clause.


Q) Write a PL/SQL program to display employee name whose employee id is 204?

	DECLARE 
	L_empName VARCHAR2(10);
	BEGIN
	select ename into L_empName from emp where eid=204;
	DBMS_OUTPUT.PUT_LINE(L_empName);
	END;
	/
	
Q) Write a PL/SQL program to display employee name and employee salary 
   whose employee id is 202?

	DECLARE 
	L_empName varchar2(10);
	L_empSal  NUMBER(8,2);
	BEGIN
	select ename,esal into L_empName,L_empSal from emp where eid=202;
	DBMS_OUTPUT.PUT_LINE(L_empName||' '||L_empSal);
	END;
	/
	

Q) Write a PL/SQL program to display employee name, employee salary and job from emp based on employee id?


	DECLARE 
	L_empName varchar2(10);
	L_empSal number(8,2);
	L_job    varchar2(10);
	L_empId  number(3);
	BEGIN 
	L_empId:=&no;
	select ename,esal,job into L_empName,L_empSal,L_job from emp where eid=L_empId;
	DBMS_OUTPUT.PUT_LINE(L_empName||' '||L_empSal||' '||L_job);
	END;
	/


Percentage(%) TYPE Attribute 
============================
It is used to declare a local variable with respect to the column.
syntax:
-------
	var_name   table_name.col_name%TYPE;


Q) Write a PL/SQL program to display employee name, employee salary and job from emp based on employee id?
	
	DECLARE 
	L_empName   emp.ename%TYPE;
	L_empSal    emp.esal%TYPE;
	L_job       emp.job%TYPE;
	L_empId     emp.eid%TYPE;
	BEGIN
	L_empId := &eid;
	select ename,esal,job into L_empName,L_empSal,L_job  from emp where eid=L_empId;
	DBMS_OUTPUT.PUT_LINE(L_empName||' '||L_empSal||' '||L_job);
	END;
	/


Percentage(%) ROWTYPE attribute 
================================
It is used to declare a local variable which is used to hold complete row of a table.

We can't print ROWTYPE variable directly, we need to take the support of column name.

syntax:
-------
	var_name   table_name%ROWTYPE;

Q) Write a PL/SQL program to display employee information whose employee id is 203?

	DECLARE 
	A emp%ROWTYPE;
	BEGIN 
	select * into A from emp where eid=203;
	DBMS_OUTPUT.PUT_LINE(A.eid||' '||A.ename||' '||A.esal||' '||A.job||' '||A.deptno||' '||A.comm);
	END;
	/
	

Q) Write a PL/SQL program to display employee information based on employee id?

	DECLARE 
	A emp%ROWTYPE;
	L_eid emp.eid%TYPE;
	BEGIN 
	L_eid:=&id;
	select * into A from emp where eid=L_eid;
	DBMS_OUTPUT.PUT_LINE(A.eid||' '||A.ename||' '||A.esal||' '||A.job||' '||A.deptno||' '||A.comm);
	END;
	/


Control Statements in PL/SQL
===========================
We have three control statements in PL/SQL.

1) IF THEN 

2) IF THEN ELSE 

3) IF THEN ELSIF THEN ELSE 


1) IF THEN 
-----------
It evalutes the code only if our condition is true.

ex:
---
	DECLARE 
	A number:=5000;
	BEGIN 
	
	IF A>2000 THEN
	DBMS_OUTPUT.PUT_LINE('Value Is Large');
	END IF;

	END;
	/	

ex:
----
	DECLARE 
	A number:=1000;
	BEGIN 
	
	IF A>2000 THEN
	DBMS_OUTPUT.PUT_LINE('Value Is Large');
	END IF;

	END;
	/

2) IF THEN ELSE 
---------------
It evalutes the code either our condition is true or false.

ex:
---
	DECLARE 
	A number:=5000;
	BEGIN

	IF A>2000 THEN 
	DBMS_OUTPUT.PUT_LINE('Value Is Large');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Value Is Small');
	END IF;

	END;
	/
	
ex:
---
	DECLARE 
	A number:=1000;
	BEGIN

	IF A>2000 THEN 
	DBMS_OUTPUT.PUT_LINE('Value Is Large');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Value Is Small');
	END IF;

	END;
	/
	
3) IF THEN ELSIF THEN ELSE 
--------------------------
It evaluates the code based on multiple conditions.

ex:
---
	DECLARE 
	L_option number(3);

	BEGIN
	L_option:=&opt;
	IF L_option=100 THEN
		DBMS_OUTPUT.PUT_LINE('It is police number');
	ELSIF L_option=103 THEN 
		DBMS_OUTPUT.PUT_LINE('It is enquiry number');
	ELSIF L_option=108 THEN 
		DBMS_OUTPUT.PUT_LINE('It is emergency number');
	ELSE
		DBMS_OUTPUT.PUT_LINE('Invalid option');
	END IF;

	END;
	/















































