Types of Statement objects in JDBC
==================================
We have three Statement objects in JDBC.

1) Simple Statement object
-------------------------
It is an object of underlying supplied java class which implements java.sql.Statement interface.

2) PreparedStatement object 
---------------------------
It is an object of underlying supplied java class which implements java.sql.PreparedStatement interface.

3) CallableStatement object 
---------------------------
It is an object of underlying supplied java class which implements java.sql.CallableStatement interface.



SQL Injection problem 
=====================
Along with input values if we pass special SQL instruction which change behaviour of a query and an application is called SQL injection problem.

Here special SQL instruction means comments in SQL i.e --.

ex:
---
	Enter username : raja'--
	Enter password : pooja
	
	Valid Credentials 

While dealing with simple Statement object there is a chance of raising SQL injection problem.

To overcome this limitation we need to use preparedStatement object.


userlist table 
==============
drop table userlist;
create table userlist(uname varchar2(10),pwd varchar2(10));
insert into userlist values('raja','rani');
insert into userlist values('king','kingdom');
commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class SqlInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the username :");
		String name = sc.next();
		
		System.out.println("Enter the password :");
		String pass = sc.next();
		
		//converting inputs according to SQL Query
		name="'"+name+"'";
		pass="'"+pass+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st = con.createStatement();
		
		String qry = "select count(*) from userlist where uname="+name+" and pwd="+pass;
		
		ResultSet rs = st.executeQuery(qry);
		int result = 0;
		while(rs.next())
		{
			result = rs.getInt(1);
		}
		if(result==1)
			System.out.println("Valid Credentials ");
		else
			System.out.println("Invalid Credentials");
		
		rs.close();
		st.close();
		con.close();
		
	}
}

Limitations with Simple Statement object
========================================
> It is not suitable to execute same query for multiple times.

> It raises SQL injection problem.

> We can't use string inputs without any conversion.

> Framing query with variables is quit complex.

> It does not allow us to insert date values to database table column.

> It does not allow us to insert LOB (Large Object) values to database table column.

To overcome this above limitations we need to use PreparedStatement object.




Working with PreparedStatement object
=====================================
step1:
------
	Create a query with placeholders or parameters.
	ex:
		String qry = "insert into student values(?,?,?)";
step2:
------
	Convert SQL query to pre-compiled SQL query.
	ex:
		PreparedStatement ps = con.prepareStatement(qry);

step3:
-----
	Set the values to query parameters or placeholders.
	ex:	
		ps.setInt(1,no);
		ps.setString(2,name);
		ps.setString(3,add);

step4:
-----
	Close PreparedStatement object.
	ex:
		ps.close();




Q) Write a JDBC application to insert a student record using PreparedStatement object?

package com.ihub.www;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;
public class PSInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name = sc.next();
		
		System.out.println("Enter the student address : ");
		String add = sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry = "insert into student values(?,?,?)";
		
		PreparedStatement ps = con.prepareStatement(qry);
		
		//set the values 
		ps.setInt(1, no);
		ps.setString(2, name);
		ps.setString(3, add);
		
		//execute 
		int result = ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
		
	}
}

Q) Write a jdbc application to update student name based on student number ?


package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSUpdateApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name = sc.next();
	
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry  = "update student set sname=? where sno=?";
		
		PreparedStatement ps = con.prepareStatement(qry);
		
		//set the values 
		ps.setString(1,name);
		ps.setInt(2, no);
		
		//execute 
		int result = ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Updated");
		else
			System.out.println("Record Updated");
		
		ps.close();
		con.close();
	}
}

Q) Write a JDBC application to delete a student record based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSDeleteApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the student no :");
		int no = sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry  = "delete from student where sno=?";
		
		PreparedStatement ps = con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		
		//execute 
		int result = ps.executeUpdate();
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println("Record Deleted");
		
		ps.close();
		con.close();
	}
}


Solution For SQL Injection Problem 
==================================
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class SolForSqlInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter the username :");
		String name = sc.next();
		
		System.out.println("Enter the password :");
		String pass = sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry  = "select count(*) from userlist where uname=? and pwd=?";
		
		PreparedStatement ps = con.prepareStatement(qry);
		
		//set the values 
		ps.setString(1, name);
		ps.setString(2, pass);
		
		ResultSet rs = ps.executeQuery();
		int result =0;
		while(rs.next())
		{
			result = rs.getInt(1);
		}
		if(result==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
		
		rs.close();
		ps.close();
		con.close();
	}
}


DatabaseMetaData 
================
DatabaseMetaData is an interface which is present in java.sql package.

DatabaseMetaData provides metadata of a database.

DatabaseMetaData gives information about database product name, database product version, database driver name, database driver version, database username and etc.

We can create DatabaseMetaData object by using getMetaData() method of Connection object.

ex:
	DatabaseMetaData dbmd = con.getMetaData();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;

public class DBMDApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		DatabaseMetaData dbmd = con.getMetaData();
		System.out.println(dbmd.getDatabaseProductName());
		System.out.println(dbmd.getDatabaseProductVersion());
		System.out.println(dbmd.getDriverName());
		System.out.println(dbmd.getDriverVersion());
		System.out.println(dbmd.getUserName());
		
		con.close();
	}
}







































































































































































