Quick Sort Program
-------------------
input:
	20 4 1 12 15 6 8

output:
	1 4 6 8 12 15 20


class QuickSortProgram  
{
	public static void main(String[] args) 
	{
		int[] arr = {20,4,1,12,15,6,8};
		
		System.out.println("Original Array");
		printArray(arr);
		
		quickSort(arr,0,arr.length-1);
		
		System.out.println("Sorted Array");
		printArray(arr);
		
	}
	public static void quickSort(int[] arr,int low,int high)
	{
		if(low<high)
		{
			int pi = partition(arr,low,high);
			quickSort(arr,low,pi-1);
			quickSort(arr,pi+1,high);
		}
	}
	public static int partition(int[] arr,int low,int high)
	{
		int pivotal = arr[high];
		int i = low-1;
		for(int j=low;j<high;j++)
		{
			if(arr[j]<pivotal)
			{
				i++;
				swap(arr,i,j);
			}
		}
		swap(arr,i+1,high);
		return i+1;
	}
	public static void swap(int[] arr,int i,int j)
	{
		int temp = arr[i];
		arr[i]=arr[j];
		arr[j]=temp;
	}

	public static void printArray(int[] arr)
	{
		for(int i : arr)
		{
			System.out.print(i+" ");
		}
		System.out.println();
	}
}

Merge Sort 
===========
It is a divide and conquer technique used in data structures and algorithms. It works recursively dividing our array into sub arrays untill each sub array contains single element and merge sub arrays in a sorting manner.

Case 		Time Complexity 
----		---------------
Best		O(n log n) (Linearthemic Time)
Average 	O(n log n) (Linearthemic Time)
Worst 		O(n log n) (Linearthemic Time)

Diagram: DSA7.1

Input:
	5 8 9 1 6 7 

Output:
	1 5 6 7 8 9 


class MergeSortProgram  
{
	public static void main(String[] args) 
	{
		int arr[] = {5,8,9,1,6,7};
		
		System.out.println("Original Array");
		printArray(arr);
		
		divide(arr,0,arr.length-1);
		
		System.out.println("Sorted Array");
		printArray(arr);
	}
	public static void divide(int[] arr,int left,int right)
	{
		if(left < right)
		{
			int mid = (left+right)/2;
			divide(arr,left,mid);
			divide(arr,mid+1,right);
			conquer(arr,left,mid,right);
		}
	}
	public static void conquer(int[] arr,int left,int mid,int right)
	{
		int n1 = mid-left+1;
		int n2 = right - mid;
			
		int[] L = new int[n1];
		int[] R = new int[n2];
		
		//merge and sort logic 
		for(int i=0;i<n1;i++)
			L[i]=arr[left+i];
		for(int j=0;j<n2;j++)
			R[j]=arr[mid+1+j];
		
		int i=0,j=0,k=left;
		while(i<n1 && j<n2)
		{
			if(L[i] <= R[j])
			{
				arr[k++]=L[i++];
			}
			else
			{
				arr[k++]=R[j++];
			}
		}
		//remaining elements
		while(i<n1)
		{
			arr[k++]=L[i++];
		}
		while(j<n2)
		{
			arr[k++]=R[j++];
		}
	}
	
	public static void printArray(int[] arr)
	{
		for(int i: arr)
		{
			System.out.print(i+" ");
		}
		System.out.println();
	}
}





























